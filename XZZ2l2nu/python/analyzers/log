autophobj.py:    NTupleVariable("",    lambda x : x),
autophobj.py:    NTupleVariable("",    lambda x : x,int),
autophobj.py:    NTupleVariable("pt",    lambda x : x.pt()),
autophobj.py:    NTupleVariable("phi",   lambda x : x.phi()),
autophobj.py:    NTupleVariable("x",    lambda x : x.x()),
autophobj.py:    NTupleVariable("y",    lambda x : x.y()),
autophobj.py:    NTupleVariable("z",    lambda x : x.z()),
autophobj.py:    NTupleVariable("pt",    lambda x : x.pt()),
autophobj.py:    #NTupleVariable("px",    lambda x : x.px()),
autophobj.py:    #NTupleVariable("py",    lambda x : x.py()),
autophobj.py:    #NTupleVariable("pz",    lambda x : x.pz()),
autophobj.py:    NTupleVariable("eta",   lambda x : x.eta()),
autophobj.py:    NTupleVariable("rapidity",   lambda x : x.rapidity()),
autophobj.py:    NTupleVariable("phi",   lambda x : x.phi()),
autophobj.py:    NTupleVariable("mass",  lambda x : x.mass()),
autophobj.py:    NTupleVariable("p4",    lambda x : x, "TLorentzVector", default=ROOT.reco.Particle.LorentzVector(0.,0.,0.,0.), filler = lambda vector, obj: vector.SetPtEtaPhiM(obj.pt(), obj.eta(), obj.phi(), obj.mass())),
autophobj.py:    NTupleVariable("pt",    lambda x : x.Pt()),
autophobj.py:    #NTupleVariable("px",    lambda x : x.Px()),
autophobj.py:    #NTupleVariable("py",    lambda x : x.Py()),
autophobj.py:    #NTupleVariable("pz",    lambda x : x.Pz()),
autophobj.py:    NTupleVariable("eta",   lambda x : x.Eta()),
autophobj.py:    NTupleVariable("rapidity",   lambda x : x.Rapidity()),
autophobj.py:    NTupleVariable("phi",   lambda x : x.Phi()),
autophobj.py:    NTupleVariable("energy",  lambda x : x.E()),
autophobj.py:    NTupleVariable("mass",  lambda x : x.M()),
autophobj.py:    NTupleVariable("mt",  lambda x : x.Mt()),
autophobj.py:    NTupleVariable("pdgId",   lambda x : x.pdgId(), int),
autophobj.py:    NTupleVariable("id",   lambda x : x.id, int),
autophobj.py:    NTupleVariable("wgt",   lambda x : x.wgt),
autophobj.py:    NTupleVariable("charge",   lambda x : x.charge(), int),
autophobj.py:    NTupleVariable("hasgen",  lambda x : getattr(x,"hasgen",-1), int, help="has gen particle"),
autophobj.py:    NTupleVariable("ptErr",  lambda x : x.ptErr() if abs(x.pdgId())==13 else -999, help="pt Error"),
autophobj.py:    #NTupleVariable("TuneP_pt",  lambda x : x.TuneP_pt() if abs(x.pdgId())==13 else x.pt(), help="TuneP Pt for muon"),
autophobj.py:    #NTupleVariable("TuneP_ptErr",  lambda x : x.physObj.tunePMuonBestTrack().ptError() if abs(x.pdgId())==13 else -999, help="TuneP Pt error for muon"),
autophobj.py:    #NTupleVariable("TuneP_eta",  lambda x : x.TuneP_eta() if abs(x.pdgId())==13 else x.eta(), help="TuneP eta for muon"),
autophobj.py:    #NTupleVariable("TuneP_phi",  lambda x : x.TuneP_phi() if abs(x.pdgId())==13 else x.phi(), help="TuneP phi for muon"),
autophobj.py:    #NTupleVariable("TuneP_type",  lambda x : x.physObj.tunePMuonBestTrackType() if abs(x.pdgId())==13 else -999, help="TuneP type for muon, https://cmssdt.cern.ch/SDT/doxygen/CMSSW_7_6_3_patch2/doc/html/df/de3/classreco_1_1Muon.html#afceb985a23ee1d456e4dc91391f2e7fe"),
autophobj.py:    NTupleVariable("dxy",   lambda x : x.dxy(), help="d_{xy} with respect to PV, in cm (with sign)"),
autophobj.py:    NTupleVariable("dz",    lambda x : x.dz() , help="d_{z} with respect to PV, in cm (with sign)"),
autophobj.py:    NTupleVariable("edxy",  lambda x : x.edB() if hasattr(x,'edB') else -999, help="#sigma(d_{xy}) with respect to PV, in cm"),
autophobj.py:    NTupleVariable("edz",   lambda x : x.edz() if hasattr(x,'edz') else -999, help="#sigma(d_{z}) with respect to PV, in cm"),
autophobj.py:    NTupleVariable("ip3d",  lambda x : x.ip3D() if hasattr(x,'ip3D') else -999, help="d_{3d} with respect to PV, in cm (absolute value)"),
autophobj.py:    #NTupleVariable("miniRelIso",  lambda x : x.miniRelIso if hasattr(x,'miniRelIso') else  -999, help="PF Rel miniRel, pile-up corrected"),
autophobj.py:    NTupleVariable("muonincore03",  lambda x : getattr(x,"nminc",-999), help="number of other muons in core0.3 "),
autophobj.py:    NTupleVariable("trackerIso",  lambda x : getattr(x,"trackerIso",-999), help="muon tracker isolation"),
autophobj.py:    #NTupleVariable("heepV60_noISO",  lambda x : x.heepV60_noISO if hasattr(x,'heepV60_noISO') else  -999, help="heepV60_noISO"),
autophobj.py:    NTupleVariable("highPtID",  lambda x : x.highPtID if hasattr(x,'highPtID') else  -999, help="highPtID"),
autophobj.py:    NTupleVariable("trackerHighPtID",  lambda x : x.trackerHighPtID if hasattr(x,'trackerHighPtID') else  -999, help="trackerHighPtID"),
autophobj.py:    NTupleVariable("isfromX", lambda x : x.xdaughter if hasattr(x,'xdaughter') else -100, help="is from X"),
autophobj.py:    NTupleVariable("looseelectron",   lambda x : x.physObj.electronID("cutBasedElectronID-Spring15-25ns-V1-standalone-loose") if abs(x.pdgId())==11 else -999, int, help="electron POG Loose id"),
autophobj.py:    NTupleVariable("eSCeta",   lambda x : x.physObj.superCluster().eta() if abs(x.pdgId())==11 else -999, float, help="electron SC eta"),
autophobj.py:    NTupleVariable("eSeedXtal",   lambda x : x.seedXtal.energy() if (abs(x.pdgId())==11 and hasattr(x, 'seedXtal')) else -999, float, help="electron seed xtral energy"),
autophobj.py:    #NTupleVariable("timeSeedXtal",   lambda x : x.seedXtal.time() if (abs(x.pdgId())==11 and hasattr(x, 'seedXtal')) else -999, float, help="electron seed xtral time"),
autophobj.py:    NTupleVariable("looseelectronnoiso",   lambda x : x.loose_nonISO if abs(x.pdgId())==11 else -999, int, help="electron POG Loose id no iso"),
autophobj.py:    #NTupleVariable("looseisoelectron",   lambda x : x.looseiso if abs(x.pdgId())==11 else -999, int, help="electron POG Loose id default iso"),
autophobj.py:    NTupleVariable("electronrelIsoea03",   lambda x : x.relIsoea03 if abs(x.pdgId())==11 else -999, float, help="electron relisoea03"),
autophobj.py:    NTupleVariable("hltSafeId",   lambda x : x.hltSafeId if abs(x.pdgId())==11 else -999, float, help="hltSafeId"),
autophobj.py:    #NTupleVariable("lepsf",  lambda x : getattr(x,'lepsf',1), help="lepton sf"),
autophobj.py:    #NTupleVariable("lepsfUp",  lambda x : getattr(x,'lepsfUp',1), help="lepton sf upper"),
autophobj.py:    #NTupleVariable("lepsfLo",  lambda x : getattr(x,'lepsfLo',1), help="lepton sf lower"),
autophobj.py:    NTupleVariable("trigerobj_HLTbit", lambda x : x.triggerbit if hasattr(x,'triggerbit')  else -100, int, help="Electron matched HLT object path bit"),
autophobj.py:    #NTupleVariable("trigerobj_HLTfilters", lambda x : x.triggerFilters if hasattr(x,'triggerFilters')  else '', string, help="Electron matched HLT object filters"),
autophobj.py:    NTupleVariable("isBadMuon", lambda x : x.isBadMuon if hasattr(x,'isBadMuon')  else 0, int, help="flag of bad muon"),
autophobj.py:    NTupleVariable("isPFMuon",   lambda x : x.isPFMuon() if (abs(x.pdgId())==13) else -999, float, help="if not pf muon, that is a bad more on duplicated muon"),
autophobj.py:    NTupleVariable("chargedHadRelIso03",  lambda x : x.chargedHadronIso(0.3)/x.pt(), help="PF Rel Iso, R=0.3, charged hadrons only"),
autophobj.py:    NTupleVariable("chargedHadRelIso04",  lambda x : x.chargedHadronIso(0.4)/x.pt(), help="PF Rel Iso, R=0.4, charged hadrons only"),
autophobj.py:    NTupleVariable("softMuonId", lambda x : x.muonID("POG_ID_Soft") if abs(x.pdgId())==13 else 1, int, help="Muon POG Soft id"),
autophobj.py:    NTupleVariable("pfMuonId",   lambda x : x.muonID("POG_ID_Loose") if abs(x.pdgId())==13 else 1, int, help="Muon POG Loose id"),
autophobj.py:    NTupleVariable("tightMuonId",   lambda x : x.muonID("POG_ID_Tight") if abs(x.pdgId())==13 else 1, int, help="Muon POG Tight id"),
autophobj.py:    NTupleVariable("trackerLayers", lambda x : (x.track() if abs(x.pdgId())==13 else x.gsfTrack()).hitPattern().trackerLayersWithMeasurement(), int, help="Tracker Layers"),
autophobj.py:    NTupleVariable("pixelLayers", lambda x : (x.track() if abs(x.pdgId())==13 else x.gsfTrack()).hitPattern().pixelLayersWithMeasurement(), int, help="Pixel Layers"),
autophobj.py:    NTupleVariable("trackerHits", lambda x : (x.track() if abs(x.pdgId())==13 else x.gsfTrack()).hitPattern().numberOfValidTrackerHits(), int, help="Tracker hits"),
autophobj.py:    NTupleVariable("lostOuterHits",    lambda x : (x.gsfTrack() if abs(x.pdgId())==11 else x.innerTrack()).hitPattern().numberOfLostHits(ROOT.reco.HitPattern.MISSING_OUTER_HITS), int, help="Number of lost hits on inner track"),
autophobj.py:    NTupleVariable("innerTrackValidHitFraction", lambda x : (x.gsfTrack() if abs(x.pdgId())==11 else x.innerTrack()).validFraction(), help="fraction of valid hits on inner track"), 
autophobj.py:    NTupleVariable("innerTrackChi2",      lambda x : (x.gsfTrack() if abs(x.pdgId())==11 else x.innerTrack()).normalizedChi2(), help="Inner track normalized chi2"), 
autophobj.py:    NTupleVariable("nStations",    lambda lepton : lepton.numberOfMatchedStations() if abs(lepton.pdgId()) == 13 else 4, help="Number of matched muons stations (4 for electrons)"),
autophobj.py:    NTupleVariable("caloCompatibility",      lambda lepton : lepton.caloCompatibility() if abs(lepton.pdgId()) == 13 else 0, help="Calorimetric compatibility"), 
autophobj.py:    NTupleVariable("globalTrackChi2",      lambda lepton : lepton.globalTrack().normalizedChi2() if abs(lepton.pdgId()) == 13 and lepton.globalTrack().isNonnull() else 0, help="Global track normalized chi2"), 
autophobj.py:    NTupleVariable("trkKink",      lambda lepton : lepton.combinedQuality().trkKink if abs(lepton.pdgId()) == 13 else 0, help="Tracker kink-finder"), 
autophobj.py:    NTupleVariable("segmentCompatibility", lambda lepton : lepton.segmentCompatibility() if abs(lepton.pdgId()) == 13 else 0, help="Segment-based compatibility"), 
autophobj.py:    NTupleVariable("chi2LocalPosition",    lambda lepton : lepton.combinedQuality().chi2LocalPosition if abs(lepton.pdgId()) == 13 else 0, help="Tracker-Muon matching in position"), 
autophobj.py:    NTupleVariable("chi2LocalMomentum",    lambda lepton : lepton.combinedQuality().chi2LocalMomentum if abs(lepton.pdgId()) == 13 else 0, help="Tracker-Muon matching in momentum"), 
autophobj.py:    NTupleVariable("glbTrackProbability",  lambda lepton : lepton.combinedQuality().glbTrackProbability if abs(lepton.pdgId()) == 13 else 0, help="Global track pseudo-probability"), 
autophobj.py:    NTupleVariable("sigmaIEtaIEta",  lambda x : x.full5x5_sigmaIetaIeta() if abs(x.pdgId())==11 else 0, help="Electron sigma(ieta ieta), with full5x5 cluster shapes"),
autophobj.py:    NTupleVariable("dEtaScTrkIn",    lambda x : x.deltaEtaSuperClusterTrackAtVtx() if abs(x.pdgId())==11 else 0, help="Electron deltaEtaSuperClusterTrackAtVtx (without absolute value!)"),
autophobj.py:    NTupleVariable("dPhiScTrkIn",    lambda x : x.deltaPhiSuperClusterTrackAtVtx() if abs(x.pdgId())==11 else 0, help="Electron deltaPhiSuperClusterTrackAtVtx (without absolute value!)"),
autophobj.py:    NTupleVariable("hadronicOverEm", lambda x : x.hadronicOverEm() if abs(x.pdgId())==11 else 0, help="Electron hadronicOverEm"),
autophobj.py:    NTupleVariable("eInvMinusPInv",  lambda x : ((1.0/x.ecalEnergy() - x.eSuperClusterOverP()/x.ecalEnergy()) if x.ecalEnergy()>0. else 9e9) if abs(x.pdgId())==11 else 0, help="Electron 1/E - 1/p  (without absolute value!)"),
autophobj.py:    NTupleVariable("eInvMinusPInv_tkMom", lambda x: ((1.0/x.ecalEnergy()) - (1.0 / x.trackMomentumAtVtx().R() ) if (x.ecalEnergy()>0. and x.trackMomentumAtVtx().R()>0.) else 9e9) if abs(x.pdgId())==11 else 0, help="Electron 1/E - 1/p_tk_vtx  (without absolute value!)"),
autophobj.py:    NTupleVariable("etaSc", lambda x : x.superCluster().eta() if abs(x.pdgId())==11 else -100, help="Electron supercluster pseudorapidity"),
autophobj.py:#    NTupleVariable("trigerob_pt", lambda x : x.triggerob.pt if hasattr(x,'triggerob') else -100, help="Electron matched HLT object pt"),
autophobj.py:#    NTupleVariable("trigerob_eta", lambda x : x.triggerob.eta if hasattr(x,'triggerob') else -100, help="Electron matched HLT object eta"),
autophobj.py:#    NTupleVariable("trigerob_phi", lambda x : x.triggerob.phi if hasattr(x,'triggerob') else -100, help="Electron matched HLT object phi"),
autophobj.py:#    NTupleVariable("trigerob_deltaR", lambda x : x.triggerob.dR if hasattr(x,'triggerob') else -100, help="Electron matched HLT object phi"),
autophobj.py:    NTupleVariable("charge",   lambda x : x.charge(), int),
autophobj.py:    NTupleVariable("decayMode",   lambda x : x.decayMode(), int),
autophobj.py:    NTupleVariable("idDecayMode",   lambda x : x.idDecayMode, int),
autophobj.py:    NTupleVariable("idDecayModeNewDMs",   lambda x : x.idDecayModeNewDMs, int),
autophobj.py:    NTupleVariable("dxy",   lambda x : x.dxy(), help="d_{xy} of lead track with respect to PV, in cm (with sign)"),
autophobj.py:    NTupleVariable("dz",    lambda x : x.dz() , help="d_{z} of lead track with respect to PV, in cm (with sign)"),
autophobj.py:    NTupleVariable("idMVA", lambda x : x.idMVA, int, help="1,2,3,4,5,6 if the tau passes the very loose to very very tight WP of the MVA3oldDMwLT discriminator"),
autophobj.py:    NTupleVariable("idMVANewDM", lambda x : x.idMVANewDM, int, help="1,2,3,4,5,6 if the tau passes the very loose to very very tight WP of the MVA3newDMwLT discriminator"),
autophobj.py:    NTupleVariable("idCI3hit", lambda x : x.idCI3hit, int, help="1,2,3 if the tau passes the loose, medium, tight WP of the By<X>CombinedIsolationDBSumPtCorr3Hits discriminator"),
autophobj.py:    NTupleVariable("idAntiMu", lambda x : x.idAntiMu, int, help="1,2 if the tau passes the loose/tight WP of the againstMuon<X>3 discriminator"),
autophobj.py:    NTupleVariable("idAntiE", lambda x : x.idAntiE, int, help="1,2,3,4,5 if the tau passes the v loose, loose, medium, tight, v tight WP of the againstElectron<X>MVA5 discriminator"),
autophobj.py:    NTupleVariable("isoCI3hit",  lambda x : x.tauID("byCombinedIsolationDeltaBetaCorrRaw3Hits"), help="byCombinedIsolationDeltaBetaCorrRaw3Hits raw output discriminator"),
autophobj.py:    NTupleVariable("mcMatchId",  lambda x : getattr(x, 'mcMatchId', -99), int, mcOnly=True, help="Match to source from hard scatter (pdgId of heaviest particle in chain, 25 for H, 6 for t, 23/24 for W/Z), zero if non-prompt or fake"),
autophobj.py:    NTupleVariable("charge",   lambda x : x.charge(), int),
autophobj.py:    NTupleVariable("dz",    lambda x : x.dz() , help="d_{z} of lead track with respect to PV, in cm (with sign)"),
autophobj.py:    NTupleVariable("absIso",  lambda x : x.absIso, float, mcOnly=False, help="abs charged iso with condition for isolation such that Min(0.2*pt, 8 GeV)"),
autophobj.py:    NTupleVariable("relIsoAn04",  lambda x : x.relIsoAn04 if hasattr(x,'relIsoAn04') else  -999, help="PF Activity Annulus, pile-up corrected"),
autophobj.py:    NTupleVariable("mcMatchId",  lambda x : getattr(x, 'mcMatchId', -99), int, mcOnly=True, help="Match to source from hard scatter (pdgId of heaviest particle in chain, 25 for H, 6 for t, 23/24 for W/Z), zero if non-prompt or fake"),
autophobj.py:    NTupleVariable("trigerob_HLTbit", lambda x : getattr(x,'triggerbit',-100), int, help="photon matched HLT object path bit"),
autophobj.py:    NTupleVariable("trigerob_pt", lambda x : getattr(x,'triggerpt',-100), help="photon matched HLT object pt"),
autophobj.py:    NTupleVariable("trigerob_eta", lambda x : getattr(x,'triggereta',-100), help="photon matched HLT object eta"),
autophobj.py:    NTupleVariable("trigerob_phi", lambda x : getattr(x,'triggerphi',-100), help="photon matched HLT object phi"),
autophobj.py:    NTupleVariable("idCutBased", lambda x : x.idCutBased, int, help="1,2,3 if the gamma passes the POG_SPRING15_25ns_(Loose,Medium,Tight)"),
autophobj.py:    NTupleVariable("hOverE",  lambda x : x.hOVERe(), float, help="hoverE for photons"),
autophobj.py:    NTupleVariable("ieta",  lambda x : x.iEta(), float, help=" "),
autophobj.py:    NTupleVariable("iphi",  lambda x : x.iPhi(), float, help=" "),
autophobj.py:    NTupleVariable("e5x5",  lambda x : x.e5x5(), float, help=" "),
autophobj.py:    NTupleVariable("e3x3",  lambda x : x.e3x3(), float, help=" "),
autophobj.py:    NTupleVariable("e2x5",  lambda x : x.e2x5(), float, help=" "),
autophobj.py:    NTupleVariable("e1x5",  lambda x : x.e1x5(), float, help=" "),
autophobj.py:    NTupleVariable("eTop",  lambda x : x.eTop(), float, help=" "),
autophobj.py:    NTupleVariable("eBottom",  lambda x : x.eBottom(), float, help=" "),
autophobj.py:    NTupleVariable("eLeft",  lambda x : x.eLeft(), float, help=" "),
autophobj.py:    NTupleVariable("eRight",  lambda x : x.eRight(), float, help=" "),
autophobj.py:    NTupleVariable("eMax",  lambda x : x.eMax(), float, help=" "),
autophobj.py:    NTupleVariable("time",  lambda x : x.time, float, help="seed xtal time"),
autophobj.py:    NTupleVariable("SwissCross",  lambda x : x.SwissCross, float, help="SwissCross"),
autophobj.py:    NTupleVariable("r9",  lambda x : x.full5x5_r9(), float, help="r9 for photons"),
autophobj.py:    NTupleVariable("mipNhitCone",  lambda x : x.mipNhitCone(), int, help="mipNhitCone"),
autophobj.py:    NTupleVariable("mipIsHalo",  lambda x : x.mipIsHalo(), int, help="mipIsHalo"),
autophobj.py:    NTupleVariable("mipTotE",  lambda x : x.mipTotEnergy(), float, help="mipTotEnergy"),
autophobj.py:    NTupleVariable("sigmaIetaIeta",  lambda x : x.full5x5_sigmaIetaIeta(), float, help="sigmaIetaIeta for photons"),
autophobj.py:    NTupleVariable("sigmaIphiIphi",  lambda x : x.full5x5_showerShapeVariables().sigmaIphiIphi, float, help="sigmaIphiIphi for photons"),
autophobj.py:   # NTupleVariable("chHadIso04",  lambda x : x.chargedHadronIso(), float, help="chargedHadronIsolation for photons (PAT method, deltaR = 0.4)"),
autophobj.py:    NTupleVariable("chHadIso", lambda x : x.chargedHadronIso(x.isoCorr), float, help="chargedHadronIsolation for photons with footprint removal and pile-up correction"),
autophobj.py:    NTupleVariable("phIso", lambda x : x.photonIso(x.isoCorr), float, help="gammaIsolation for photons with footprint removal and pile-up correction"),
autophobj.py:    NTupleVariable("neuHadIso", lambda x : x.neutralHadronIso(x.isoCorr), float, help="neutralHadronIsolation for photons with footprint removal and pile-up correction"),
autophobj.py:    #NTupleVariable("chHadIso", lambda x : x.chargedHadronIso(), float, help="chargedHadronIsolation for photons with footprint removal"),
autophobj.py:    #NTupleVariable("phIso", lambda x : x.photonIso(), float, help="gammaIsolation for photons with footprint removal"),
autophobj.py:    #NTupleVariable("neuHadIso", lambda x : x.neutralHadronIso(), float, help="neutralHadronIsolation for photons with footprint removal"),
autophobj.py:    #NTupleVariable("relIso", lambda x : x.ftprRelIso03 if hasattr(x,'ftprRelIso03') else x.relIso, float, help="relativeIsolation for photons with footprint removal and pile-up correction"),
autophobj.py:    NTupleVariable("mcMatchId",  lambda x : getattr(x, 'mcMatchId', -99), int, mcOnly=True, help="Match to source from hard scatter (pdgId of heaviest particle in chain, 25 for H, 6 for t, 23/24 for W/Z), zero if non-prompt or fake"),
autophobj.py:    NTupleVariable("mcPt",   lambda x : x.mcGamma.pt() if getattr(x,"mcGamma",None) else 0., mcOnly=True, help="p_{T} of associated gen photon"),
autophobj.py:    NTupleVariable("mcEta",   lambda x : x.mcGamma.eta() if getattr(x,"mcGamma",None) else 0., mcOnly=True, help="eta of associated gen photon"),
autophobj.py:    NTupleVariable("mcPhi",   lambda x : x.mcGamma.phi() if getattr(x,"mcGamma",None) else 0., mcOnly=True, help="phi of associated gen photon"),
autophobj.py:    NTupleVariable("puId", lambda x : getattr(x, 'puJetIdPassed', -99), int,     mcOnly=False, help="puId (full MVA, loose WP, 5.3.X training on AK5PFchs: the only thing that is available now)"),
autophobj.py:    NTupleVariable("rawPt",  lambda x : x.pt() * x.rawFactor(), help="p_{T} before JEC"),
autophobj.py:    NTupleVariable("hadronFlavour", lambda x : x.hadronFlavour(), int,     mcOnly=True, help="hadron flavour (ghost matching to B/C hadrons)"),
autophobj.py:    NTupleVariable("mcMatchId",  lambda x : getattr(x, 'matchedGenJetIdx', -99), int, mcOnly=True, help="Match to source from hard scatter (pdgId of heaviest particle in chain, 25 for H, 6 for t, 23/24 for W/Z), zero if non-prompt or fake"),
autophobj.py:    #NTupleVariable("corr_JECUp",  lambda x : getattr(x, 'corrJECUp', -99), float, mcOnly=True, help="JEC correction factor up"),
autophobj.py:    #NTupleVariable("corr_JECDown",  lambda x : getattr(x, 'corrJECDown', -99), float, mcOnly=True, help="JEC correction factor down"),
autophobj.py:    #NTupleVariable("corr",  lambda x : getattr(x, 'corr', -99), float, mcOnly=True, help="JEC correction factor"),
autophobj.py:    NTupleVariable("emEnergy", lambda x : x.emEnergy(), float, mcOnly=True, help="xxx"),
autophobj.py:    NTupleVariable("hadEnergy", lambda x : x.hadEnergy(), float, mcOnly=True, help="xxx"),
autophobj.py:    NTupleVariable("invisibleEnergy", lambda x : x.invisibleEnergy(), float, mcOnly=True, help="xxx"),
autophobj.py:    NTupleVariable("auxiliaryEnergy", lambda x : x.auxiliaryEnergy(), float, mcOnly=True, help="xxx"),
autophobj.py:    NTupleVariable("nGenConstituents", lambda x : x.numberOfDaughters(), int, mcOnly=True, help="xxx"),
autophobj.py:    NTupleVariable("area",   lambda x : x.jetArea(), help="Catchment area of jet"),
autophobj.py:    NTupleVariable("qgl",   lambda x :x.qgl() , float, mcOnly=False,help="QG Likelihood"),
autophobj.py:    NTupleVariable("ptd",   lambda x : getattr(x.computeQGvars(),'ptd', 0), float, mcOnly=False,help="QG input variable: ptD"),
autophobj.py:    NTupleVariable("axis2",   lambda x : getattr(x.computeQGvars(),'axis2', 0) , float, mcOnly=False,help="QG input variable: axis2"),
autophobj.py:    NTupleVariable("mult",   lambda x : getattr(x.computeQGvars(),'mult', 0) , int, mcOnly=False,help="QG input variable: total multiplicity"),
autophobj.py:    NTupleVariable("partonId", lambda x : getattr(x,'partonId', 0), int,     mcOnly=True, help="parton flavour (manually matching to status 23 particles)"),
autophobj.py:    NTupleVariable("partonMotherId", lambda x : getattr(x,'partonMotherId', 0), int,     mcOnly=True, help="parton flavour (manually matching to status 23 particles)"),
autophobj.py:    NTupleVariable("nLeptons",   lambda x : len(x.leptons) if  hasattr(x,'leptons') else  0 , float, mcOnly=False,help="Number of associated leptons"),
autophobj.py:    NTupleVariable("sumEt", lambda x : x.sumEt() ),
autophobj.py:    NTupleVariable("rawPt",  lambda x : x.uncorPt() ),
autophobj.py:    NTupleVariable("rawPhi", lambda x : x.uncorPhi() ),
autophobj.py:    NTupleVariable("rawSumEt", lambda x : x.uncorSumEt() ),
autophobj.py:    NTupleVariable("t1XYPt",  lambda x : x.corPt(ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi",  lambda x : x.corPhi(ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYSumEt",  lambda x : x.corSumEt(ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1SmearPt",  lambda x : x.corPt(ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi",  lambda x : x.corPhi(ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearSumEt",  lambda x : x.corSumEt(ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1Pt_JetEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_JetEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_JetEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_JetEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_JetResUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_JetResDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_JetResUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_JetResDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_MuonEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.MuonEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_MuonEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.MuonEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_MuonEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.MuonEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_MuonEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.MuonEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_ElectronEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.ElectronEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_ElectronEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.ElectronEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_ElectronEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.ElectronEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_ElectronEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.ElectronEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_TauEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.TauEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_TauEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.TauEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_TauEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.TauEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_TauEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.TauEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_PhotonEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.PhotonEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_PhotonEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.PhotonEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_PhotonEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.PhotonEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_PhotonEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.PhotonEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_NoShift",  lambda x : x.shiftedPt(ROOT.pat.MET.NoShift,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_NoShift",  lambda x : x.shiftedPhi(ROOT.pat.MET.NoShift,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_UnclusterUp",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Pt_UnclusterDn",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_UnclusterUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1Phi_UnclusterDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1) ),
autophobj.py:    NTupleVariable("t1XYPt_JetEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_JetEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_JetEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_JetEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_JetResUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_JetResDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_JetResUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_JetResDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_MuonEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.MuonEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_MuonEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.MuonEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_MuonEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.MuonEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_MuonEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.MuonEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_ElectronEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.ElectronEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_ElectronEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.ElectronEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_ElectronEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.ElectronEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_ElectronEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.ElectronEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_TauEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.TauEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_TauEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.TauEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_TauEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.TauEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_TauEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.TauEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_PhotonEnUp",  lambda x : x.shiftedPt(ROOT.pat.MET.PhotonEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_PhotonEnDn",  lambda x : x.shiftedPt(ROOT.pat.MET.PhotonEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_PhotonEnUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.PhotonEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_PhotonEnDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.PhotonEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_NoShift",  lambda x : x.shiftedPt(ROOT.pat.MET.NoShift,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_NoShift",  lambda x : x.shiftedPhi(ROOT.pat.MET.NoShift,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_UnclusterUp",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPt_UnclusterDn",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_UnclusterUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1XYPhi_UnclusterDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1XY) ),
autophobj.py:    NTupleVariable("t1SmearPt_JECUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPt_JECDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_JECUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_JECDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetEnDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPt_JERUp",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPt_JERDn",  lambda x : x.shiftedPt(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_JERUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_JERDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.JetResDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPt_UnclusterUp",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPt_UnclusterDn",  lambda x : x.shiftedPt(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_UnclusterUp",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnUp,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("t1SmearPhi_UnclusterDn",  lambda x : x.shiftedPhi(ROOT.pat.MET.UnclusteredEnDown,ROOT.pat.MET.Type1Smear) ),
autophobj.py:    NTupleVariable("genPt",  lambda x : x.genMET().pt() if x.genMET() else 0 , mcOnly=True ),
autophobj.py:    NTupleVariable("genPhi", lambda x : x.genMET().phi() if x.genMET() else 0, mcOnly=True ),
autophobj.py:    NTupleVariable("genEta", lambda x : x.genMET().eta() if x.genMET() else 0, mcOnly=True ),
autophobj.py:    #NTupleVariable("metSig", lambda x : x.metSignificance() ),
autophobj.py:    NTupleVariable("charge",   lambda x : x.threeCharge()/3.0, float),
autophobj.py:    NTupleVariable("status",   lambda x : x.status(),int),
autophobj.py:    NTupleVariable("isLastCopyBeforeFSR", lambda x : x.isLastCopyBeforeFSR(), int, help="isLastCopyBeforeFSR"),
autophobj.py:    NTupleVariable("motherId", lambda x : x.mother(0).pdgId() if x.mother(0) else 0, int, help="pdgId of the mother of the particle"),
autophobj.py:    NTupleVariable("motherStatus", lambda x : x.mother(0).status() if x.mother(0) else 0, int, help="status of the mother of the particle"),
autophobj.py:    NTupleVariable("motherisLastCopyBeforeFSR", lambda x : x.mother(0).isLastCopyBeforeFSR() if x.mother(0) else 0, int, help="isLastCopyBeforeFSR of the mother of the particle"),
autophobj.py:    NTupleVariable("motherPt", lambda x : x.mother(0).pt() if x.mother(0) else 0, float, help="pt of the mother of the particle"),
autophobj.py:    NTupleVariable("motherEta", lambda x : x.mother(0).eta() if x.mother(0) else 0, float, help="eta of the mother of the particle"),
autophobj.py:    NTupleVariable("motherPhi", lambda x : x.mother(0).phi() if x.mother(0) else 0, float, help="phi of the mother of the particle"),
autophobj.py:    NTupleVariable("grandmotherId", lambda x : x.mother(0).mother(0).pdgId() if x.mother(0) and x.mother(0).mother(0) else 0, int, help="pdgId of the grandmother of the particle"),
autophobj.py:    NTupleVariable("grandmotherStatus", lambda x : x.mother(0).mother(0).status() if x.mother(0) and x.mother(0).mother(0) else 0, int, help="status of the grandmother of the particle"),
autophobj.py:    NTupleVariable("grandmotherisLastCopyBeforeFSR", lambda x : x.mother(0).mother(0).isLastCopyBeforeFSR() if x.mother(0) and x.mother(0).mother(0) else 0, int, help="isLastCopyBeforeFSR of the grandmother of the particle"),
autophobj.py:    NTupleVariable("grandmotherPt", lambda x : x.mother(0).mother(0).pt() if x.mother(0) and x.mother(0).mother(0) else 0, float, help="pt of the grandmother of the particle"),
autophobj.py:    NTupleVariable("grandmotherEta", lambda x : x.mother(0).mother(0).eta() if x.mother(0) and x.mother(0).mother(0) else 0, float, help="eta of the grandmother of the particle"),
autophobj.py:    NTupleVariable("grandmotherPhi", lambda x : x.mother(0).mother(0).phi() if x.mother(0) and x.mother(0).mother(0) else 0, float, help="phi of the grandmother of the particle"),
autophobj.py:    NTupleVariable("motherId", lambda x : x.mother(0).pdgId() if x.mother(0) else 0, int, help="pdgId of the mother of the particle"),
autophobj.py:    NTupleVariable("grandmotherId", lambda x : x.mother(0).mother(0).pdgId() if x.mother(0) and x.mother(0).mother(0) else 0, int, help="pdgId of the grandmother of the particle")
autophobj.py:    NTupleVariable("motherId", lambda x : x.motherId, int, help="pdgId of the mother of the particle"),
autophobj.py:    NTupleVariable("grandmotherId", lambda x : x.grandmotherId, int, help="pdgId of the grandmother of the particle"),
autophobj.py:    NTupleVariable("sourceId", lambda x : x.sourceId, int, help="origin of the particle (heaviest ancestor): 6=t, 25=h, 23/24=W/Z"),
autophobj.py:    NTupleVariable("motherIndex", lambda x : x.motherIndex, int, help="index of the mother in the generatorSummary")
Binary file autophobj.pyc matches
treeXZZ_cff.py:         NTupleVariable("nLL",lambda ev: len(ev.LL) , int),      
treeXZZ_cff.py:         NTupleVariable("nElMu",lambda ev: len(ev.ElMu) , int),       
treeXZZ_cff.py:         NTupleVariable("nLLNuNu",lambda ev: len(ev.LLNuNu) , int),       
treeXZZ_cff.py:         NTupleVariable("nVert",  lambda ev: len(ev.goodVertices), int, help="Number of good vertices"), 
treeXZZ_cff.py:         NTupleVariable("triggersf",  lambda x : getattr(x,'trgsf',1), help="singleelectron/muon trigger sf"),
treeXZZ_cff.py:         #NTupleVariable("nLL",lambda ev: len(ev.LL) , int),      
treeXZZ_cff.py:         #NTupleVariable("LHEweight_original", lambda ev: ev.LHE_originalWeight if  hasattr(ev,'LHE_originalWeight') else  0, mcOnly=True, help="original LHE weight"), 
treeXZZ_cff.py:         #NTupleVariable("nElMu",lambda ev: len(ev.ElMu) , int),       
treeXZZ_cff.py:         #NTupleVariable("nLLNuNu",lambda ev: len(ev.LLNuNu) , int),       
treeXZZ_cff.py:         NTupleVariable("nVert",  lambda ev: len(ev.goodVertices), int, help="Number of good vertices"), 
treeXZZ_cff.py:         NTupleVariable("nVertAll",  lambda ev: len(ev.vertices), int, help="Number of good vertices"), 
treeXZZ_cff.py:         NTupleVariable("vtx_x",  lambda ev: ev.goodVertices[0].x(), float, help="primary vertex x"), 
treeXZZ_cff.py:         NTupleVariable("vtx_y",  lambda ev: ev.goodVertices[0].y(), float, help="primary vertex y"), 
treeXZZ_cff.py:         NTupleVariable("vtx_z",  lambda ev: ev.goodVertices[0].z(), float, help="primary vertex z"), 
treeXZZ_cff.py:         #NTupleVariable("triggersf",  lambda x : getattr(x,'trgsf',1), float, mcOnly=True, help="singleelectron/muon trigger sf"),
treeXZZ_cff.py:         #NTupleVariable("triggersfUp",  lambda x : getattr(x,'trgsfUp',1),float, mcOnly=True, help="singleelectron/muon trigger sf upper"),
treeXZZ_cff.py:         #NTupleVariable("triggersfLo",  lambda x : getattr(x,'trgsfLo',1), float, mcOnly=True, help="singleelectron/muon trigger sf lower"),
treeXZZ_cff.py:         NTupleVariable("rho", lambda ev: ev.rho, float),
treeXZZ_cff.py:         NTupleVariable("lheNb", lambda ev: ev.lheNb, int, mcOnly=True),
treeXZZ_cff.py:         NTupleVariable("lheNj", lambda ev: ev.lheNj, int, mcOnly=True),
treeXZZ_cff.py:         NTupleVariable("pdf_x1", lambda ev: ev.pdf_x1, float, mcOnly=True),
treeXZZ_cff.py:         NTupleVariable("pdf_x2", lambda ev: ev.pdf_x2, float, mcOnly=True),
treeXZZ_cff.py:         NTupleVariable("Flag_BadPFMuonFilter", lambda ev: ev.BadPFMuonFilter if hasattr(ev, 'BadPFMuonFilter') else 1, int),
treeXZZ_cff.py:         NTupleVariable("Flag_BadChargedCandidateFilter", lambda ev: ev.BadChargedCandidateFilter if hasattr(ev, 'BadChargedCandidateFilter') else 1, int),
treeXZZ_cff.py:         NTupleVariable("Flag_hasBadMuon", lambda ev: ev.hasBadMuon if hasattr(ev, 'hasBadMuon') else 0, int),
treeXZZ_cff.py:        NTupleVariable("nMuon",lambda ev: len(ev.selectedMuons) if hasattr(ev,"selectedMuons") else 0, int),
treeXZZ_cff.py:        NTupleVariable("nElectron",lambda ev: len(ev.selectedElectrons) if hasattr(ev,"selectedElectrons") else 0, int),
treeXZZ_cff.py:         NTupleVariable("nVert",  lambda ev: len(ev.goodVertices), int, help="Number of good vertices"), 
Binary file treeXZZ_cff.pyc matches
XZZTypes.py:    #NTupleVariable("TuneP_usage",   lambda x : x.useTuneP, int), 
XZZTypes.py:    #NTupleVariable("TuneP_pt",   lambda x : x.TuneP_pt(), float),               
XZZTypes.py:    #NTupleVariable("TuneP_eta",   lambda x : x.TuneP_eta(), float),               
XZZTypes.py:    #NTupleVariable("TuneP_phi",   lambda x : x.TuneP_phi(), float),               
XZZTypes.py:    #NTupleVariable("TuneP_mass",   lambda x : x.TuneP_m(), float),               
XZZTypes.py:    NTupleVariable("mt",   lambda x : x.mt(), float),       
XZZTypes.py:    NTupleVariable("deltaPhi",   lambda x : x.deltaPhi(), float),       
XZZTypes.py:    NTupleVariable("deltaR",   lambda x : x.deltaR(), float),       
XZZTypes.py:    #NTupleVariable("TuneP_mt",   lambda x : x.TuneP_mt(), float),       
XZZTypes.py:    #NTupleVariable("TuneP_deltaPhi",   lambda x : x.TuneP_deltaPhi(), float),       
XZZTypes.py:    #NTupleVariable("TuneP_deltaR",   lambda x : x.TuneP_deltaR(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_LV_pt",   lambda x : x['pair'].TuneP_pt(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_LV_eta",   lambda x : x['pair'].TuneP_eta(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_LV_phi",   lambda x : x['pair'].TuneP_phi(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_LV_mass",   lambda x : x['pair'].TuneP_m(), float),       
XZZTypes.py:  NTupleVariable("deltaPhi",   lambda x : x['pair'].deltaPhi(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_deltaPhi",   lambda x : x['pair'].TuneP_deltaPhi(), float), 
XZZTypes.py:  NTupleVariable("deltaR",   lambda x : x['pair'].deltaR(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_deltaR",   lambda x : x['pair'].TuneP_deltaR(), float),       
XZZTypes.py:  NTupleVariable("mt",   lambda x : x['pair'].mt(), float),       
XZZTypes.py:  #NTupleVariable("TuneP_mt",   lambda x : x['pair'].TuneP_mt(), float),       
XZZTypes.py:    #NTupleVariable("CosdphiZMet",   lambda x : math.cos(x['pair'].deltaPhi()), float), 
XZZTypes.py:    #NTupleVariable("CosZdeltaPhi",   lambda x : math.cos(x['pair'].leg1.deltaPhi()), float), 
XZZTypes.py:    #NTupleVariable("dPTPara",   lambda x : (x['pair'].leg1.pt() + x['pair'].leg2.pt() * math.cos(x['pair'].deltaPhi())), float), 
XZZTypes.py:    #NTupleVariable("dPTParaRel",   lambda x : (x['pair'].leg1.pt() + x['pair'].leg2.pt() * math.cos(x['pair'].deltaPhi()))/(x['pair'].leg1.pt()), float), 
XZZTypes.py:    #NTupleVariable("dPTPerp",   lambda x : (x['pair'].leg2.pt() * math.sin(x['pair'].deltaPhi())), float), 
XZZTypes.py:    #NTupleVariable("dPTPerpRel",   lambda x : (x['pair'].leg2.pt() * math.sin(x['pair'].deltaPhi()))/(x['pair'].leg1.pt()), float), 
XZZTypes.py:    #NTupleVariable("metOvSqSET",   lambda x : (x['pair'].leg2.pt())/math.sqrt(x['pair'].leg2.sumEt()), float), 
XZZTypes.py:    NTupleVariable("deltaPhi",   lambda x : x['pair'].deltaPhi(), float),
XZZTypes.py:    NTupleVariable("mt",   lambda x : x['pair'].mt(), float),
XZZTypes.py:    NTupleVariable("CosDeltaPhi",   lambda x : math.cos(x['pair'].deltaPhi()), float),
XZZTypes.py:    NTupleVariable("dPTPara",   lambda x : (x['pair'].leg1.pt() + x['pair'].leg2.pt() * math.cos(x['pair'].deltaPhi())), float),
XZZTypes.py:    NTupleVariable("dPTParaRel",   lambda x : (x['pair'].leg1.pt() + x['pair'].leg2.pt() * math.cos(x['pair'].deltaPhi()))/(x['pair'].leg1.pt()), float),
XZZTypes.py:    NTupleVariable("dPTPerp",   lambda x : (x['pair'].leg2.pt() * math.sin(x['pair'].deltaPhi())), float),
XZZTypes.py:    NTupleVariable("dPTPerpRel",   lambda x : (x['pair'].leg2.pt() * math.sin(x['pair'].deltaPhi()))/(x['pair'].leg1.pt()), float),
XZZTypes.py:    NTupleVariable("metOvSqSET",   lambda x : (x['pair'].leg2.pt())/math.sqrt(x['pair'].leg2.sumEt()), float),
XZZTypes.py:    NTupleVariable("Px",  lambda x : x[0]),
XZZTypes.py:    NTupleVariable("Py",  lambda x : x[1]),
XZZTypes.py:    NTupleVariable("Et",  lambda x : x[2]),
XZZTypes.py:    NTupleVariable("id",    lambda x : x.jetID("POG_PFID") , int, mcOnly=False,help="POG Loose jet ID"),
XZZTypes.py:    NTupleVariable("area",   lambda x : x.jetArea(), help="Catchment area of jet"),
XZZTypes.py:    NTupleVariable("rawFactor",   lambda x : x.rawFactor(), float, help="pt/rawfactor will give you the raw pt"),
XZZTypes.py:    NTupleVariable("corr_JECUp",  lambda x : getattr(x, 'corrJECUp', -99), float,  help=""),
XZZTypes.py:    NTupleVariable("corr_JECDown",  lambda x : getattr(x, 'corrJECDown', -99), float,help=""),
XZZTypes.py:    NTupleVariable("corr",  lambda x : getattr(x, 'corr', -99), float, help=""),
XZZTypes.py:    NTupleVariable("corr_JERUp",  lambda x : getattr(x, 'corrJERUp', -99), float, mcOnly=True, help=""),
XZZTypes.py:    NTupleVariable("corr_JERDown", lambda x : getattr(x, 'corrJERDown', -99), float, mcOnly=True, help=""),
XZZTypes.py:    NTupleVariable("corr_JER", lambda x : getattr(x, 'corrJER', -99), float, mcOnly=True, help=""),
XZZTypes.py:    NTupleVariable("btagCSV",   lambda x : x.btag('pfCombinedInclusiveSecondaryVertexV2BJetTags'), help="CSV-IVF v2 discriminator"),
XZZTypes.py:    #NTupleVariable("btagCMVA",  lambda x : x.btag('pfCombinedMVABJetTags'), help="CMVA discriminator"),
XZZTypes.py:    NTupleVariable("mcPt",   lambda x : x.mcJet.pt() if getattr(x,"mcJet",None) else 0., mcOnly=True, help="p_{T} of associated gen jet"),
XZZTypes.py:    NTupleVariable("mcEta",   lambda x : x.mcJet.eta() if getattr(x,"mcJet",None) else 0., mcOnly=True, help="eta of associated gen jet"),
XZZTypes.py:    NTupleVariable("mcPhi",   lambda x : x.mcJet.phi() if getattr(x,"mcJet",None) else 0., mcOnly=True, help="phi of associated gen jet"),
XZZTypes.py:    NTupleVariable("mcMass",   lambda x : x.mcJet.mass() if getattr(x,"mcJet",None) else 0., mcOnly=True, help="mass of associated gen jet"),
XZZTypes.py:    NTupleVariable("mcFlavour", lambda x : x.partonFlavour(), int,     mcOnly=True, help="parton flavour (physics definition, i.e. including b's from shower)"),
XZZTypes.py:    #NTupleVariable("btag",   lambda x : x.bTag(), float),
XZZTypes.py:    #NTupleVariable("nConstituents",   lambda x : len(x.constituents), int),
XZZTypes.py:    #NTupleVariable("looseID",   lambda x : x.looseID, int),
XZZTypes.py:    #NTupleVariable("tightID",   lambda x : x.tightID, int),
XZZTypes.py:    NTupleVariable("chargedHadronEnergyFraction",   lambda x : x.chargedHadronEnergyFraction(), float,  help="for Jet ID"),
XZZTypes.py:    NTupleVariable("neutralHadronEnergyFraction",   lambda x : x.neutralHadronEnergyFraction(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("neutralEmEnergyFraction",   lambda x : x.neutralEmEnergyFraction(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("muonEnergyFraction",   lambda x : x.muonEnergyFraction(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("chargedEmEnergyFraction",   lambda x : x.chargedEmEnergyFraction(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("chargedHadronMultiplicity",   lambda x : x.chargedHadronMultiplicity(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("chargedMultiplicity",   lambda x : x.chargedMultiplicity(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("neutralMultiplicity",   lambda x : x.neutralMultiplicity(), float, help="for Jet ID"),
XZZTypes.py:    NTupleVariable("softDrop_massCorr",  lambda x : x.substructure.softDropJetMassCorr,float),
XZZTypes.py:    NTupleVariable("softDrop_massBare",  lambda x : x.substructure.softDropJetMassBare,float),
XZZTypes.py:    NTupleVariable("prunedDrop_massCorr",  lambda x : x.substructure.prunedJetMassCorr,float),
XZZTypes.py:    NTupleVariable("prunedDrop_massBare",  lambda x : x.substructure.prunedJetMassBare,float),
XZZTypes.py:    NTupleVariable("tau1",   lambda x : x.substructure.ntau[0], float),
XZZTypes.py:    NTupleVariable("tau2",   lambda x : x.substructure.ntau[1], float),
XZZTypes.py:    NTupleVariable("tau3",   lambda x : x.substructure.ntau[2], float),
XZZTypes.py:    NTupleVariable("tau4",   lambda x : x.substructure.ntau[3], float),
XZZTypes.py:    NTupleVariable("tau21_DDT",   lambda x : x.substructure.tau21_DDT, float),
XZZTypes.py:    NTupleVariable("s1BTag",   lambda x : x.subJetTags[0], float),
XZZTypes.py:    NTupleVariable("s2BTag",   lambda x : x.subJetTags[1], float),
XZZTypes.py:    NTupleVariable("btagBOOSTED",   lambda x : x.btag("pfBoostedDoubleSecondaryVertexAK8BJetTags"), float),
XZZTypes.py:    #NTupleVariable("btagBOOSTED_recalc", lambda x : x.Hbbtag if hasattr(x,'Hbbtag') else -1.0, float),
XZZTypes.py:    NTupleVariable("s1_partonFlavour",   lambda x : x.subJet_partonFlavour[0], int,"",-99,True),
XZZTypes.py:    NTupleVariable("s1_hadronFlavour",   lambda x : x.subJet_hadronFlavour[0], int,"",-99,True),
XZZTypes.py:    NTupleVariable("s2_partonFlavour",   lambda x : x.subJet_partonFlavour[1], int,"",-99,True),
XZZTypes.py:    NTupleVariable("s2_hadronFlavour",   lambda x : x.subJet_hadronFlavour[1], int,"",-99,True),
XZZTypes.py:    NTupleVariable("pfMassDecorrelated_ZHbbvsQCD", lambda x : x.pfMassDecorrelated_ZHbbvsQCD, float
XZZTypes.py:    #NTupleVariable("gen_tau1",   lambda x : x.substructureGEN.ntau[0] if hasattr(x,'substructureGEN') else -99, float,"",-99,True),
XZZTypes.py:    #NTupleVariable("gen_tau2",   lambda x : x.substructureGEN.ntau[1] if hasattr(x,'substructureGEN') else -99, float,"",-99,True),
XZZTypes.py:    #NTupleVariable("gen_tau3",   lambda x : x.substructureGEN.ntau[2] if hasattr(x,'substructureGEN') else -99, float,"",-99,True),
XZZTypes.py:    #NTupleVariable("gen_tau4",   lambda x : x.substructureGEN.ntau[3] if hasattr(x,'substructureGEN') else -99, float,"",-99,True),
XZZTypes.py:    NTupleVariable("photonEnergyFraction",   lambda x : x.photonEnergyFraction(), float,),
XZZTypes.py:    NTupleVariable("HFHadronEnergyFraction",   lambda x : x.HFHadronEnergyFraction(), float,),
XZZTypes.py:    NTupleVariable("HFEMEnergyFraction",   lambda x : x.HFEMEnergyFraction(), float),
XZZTypes.py:    NTupleVariable("electronEnergyFraction",   lambda x : x.electronEnergyFraction(), float),
Binary file XZZTypes.pyc matches
